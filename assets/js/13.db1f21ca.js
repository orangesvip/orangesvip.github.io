(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{519:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"线程基础、线程之间的共享和协作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程基础、线程之间的共享和协作"}},[t._v("#")]),t._v(" 线程基础、线程之间的共享和协作")]),t._v(" "),a("h3",{attrs:{id:"什么是进程和线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程和线程"}},[t._v("#")]),t._v(" 什么是进程和线程")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("进程是程序运行资源分配的最小单位")])]),a("p",[t._v("进程是操作系统进行资源分配的最小单位,其中资源包括:CPU、内存空间、\n磁盘 IO 等,同一进程中的多条线程共享该进程中的全部系统资源,而进程和进程\n之间是相互独立的。进程是具有一定独立功能的程序关于某个数据集合上的一次\n运行活动,进程是系统进行资源分配和调度的一个独立单位。\n进程是程序在计算机上的一次执行活动。当你运行一个程序,你就启动了一\n个进程。显然,程序是死的、静态的,进程是活的、动态的。进程可以分为系统进\n程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程,它们就\n是处于运行状态下的操作系统本身,用户进程就是所有由你启动的进程。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("线程是 CPU 调度的最小单位,必须依赖于进程而存在")])]),a("p",[t._v("线程是进程的一个实体,是 CPU 调度和分派的基本单位,它是比进程更小的、\n能独立运行的基本单位。线程自己基本上不拥有系统资源,只拥有一点在运行中\n必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其\n他的线程共享进程所拥有的全部资源。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("线程无处不在")])]),a("p",[t._v("任何一个程序都必须要创建线程,特别是 Java 不管任何程序都必须启动一个\nmain 函数的主线程; Java Web 开发里面的定时任务、定时器、JSP 和 Servlet、异\n步消息处理机制,远程访问接口RM等,任何一个监听事件, onclick的触发事件等都\n离不开线程和并发的知识。")]),t._v(" "),a("h3",{attrs:{id:"什么是进程和线程-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程和线程-2"}},[t._v("#")]),t._v(" 什么是进程和线程?")])])}),[],!1,null,null,null);s.default=e.exports}}]);